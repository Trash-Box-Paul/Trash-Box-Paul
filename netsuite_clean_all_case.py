# Generated by Selenium IDE

import time
import sys

import webdrivermanager
import win32api, win32con
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from datetime import datetime
from debug_browser import DebugBrowser
import testraw


class CleanAllCase:

    def __init__(self):
        # Step # | name | target | value
        self.driver = None
        self.driver_setup()
        #  Use selenium manager to check the version of chrome and selenium
        target_url = "https://907826.app.netsuite.com/app/center/card.nl?sc=-29&whence="
        self.driver.maximize_window()
        self.driver.get(target_url)
        if not ("https://907826.app.netsuite.com/app/center/" in self.driver.current_url):
            win32api.MessageBox(0, "Please login first and try again. :)", "Please Login",
                                win32con.MB_OK)
            sys.exit(0)

    def driver_setup(self):
        chrome_driver = webdrivermanager.ChromeDriverManager()
        try:
            self.driver = webdriver.Chrome(executable_path=chrome_driver.get_driver_filename(),
                                           options=DebugBrowser().debug_chrome())
        except:
            chrome_driver.download_and_install(chrome_driver.get_latest_version())
            time.sleep(3)
            print("!!!!!!!!!!!!!!!!")
            time.sleep(3)
            self.driver = webdriver.Chrome(executable_path=chrome_driver.get_driver_filename(),
                                           options=DebugBrowser().debug_chrome())

    def teardown_method(self):
        # Step # | name | target | value
        self.driver.close()
        # 1 | close | Chrome with debugger address |\

    def refresh_list(self):
        # Step # | name | target | value
        js_top = "var q=document.documentElement.scrollTop=0"
        self.driver.execute_script(js_top)
        # 1 | scroll | Scroll to the top of window |\
        noise = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/form/div["
                          "2]/table[1]/tbody/tr/td[1]/table/tbody/tr/td")
        self.driver.execute_script("arguments[0].style.display='hidden';", noise)

        ele = self.driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div["
                                                 "1]/div")
        self.show1(ele)
        ele_temp = self.driver.find_element(By.XPATH,
                                            "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div")
        self.show1(ele_temp)
        element = self.driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div["
                                                     "1]/div/div/ul")
        self.show1(element)
        element = self.wait("//div[2]/div/div/h2")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 2 | MouseMoveAt | Title: Paul's All Case View | hover element
        refresh_icon = "//div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/span[3]"
        element = self.wait(refresh_icon)
        self.show1(element)
        element.click()
        # 3 | move mouse and click | Refresh Icon | hover element

    def refresh_list_down(self):
        # Step # | name | target | value
        # 1 | scroll | Scroll to the top of window |\
        title_list = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[1]/h2"
        refresh_icon = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[1]/div/span[3]"
        ele = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[1]/div")
        self.show(ele)
        ele_temp = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div")
        self.show(ele_temp)
        element = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul")
        self.show(element)
        element = self.wait(title_list)
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 2 | MouseMoveAt | Title: Paul's All Case View | hover element
        element = self.wait(refresh_icon)
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element.click()
        # 3 | move mouse and click | Refresh Icon | hover element
        element = self.wait(title_list)
        self.driver.execute_script("arguments[0].scrollIntoView(true)", element)

    def clean_all_case(self):
        # Step # | name | target | value
        tab_case = "/html/body/div[1]/div[1]/div[2]/ul[4]/li[2]/a/span"
        filename = "./OA_log/"+datetime.now().strftime("%b_%d_%Y") + "_clean_list_log.txt"
        file1 = open(filename, "a+")
        self.wait(tab_case).click()
        # 1 | click | case tab |
        number_sum = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/form/div[2]/table[" \
                     "2]/tbody/tr/td/table/tbody/tr/td/a"
        # first_table = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div/table"
        try:
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, number_sum))
            )
        finally:
            time.sleep(1)
            ele = self.driver.find_element(By.XPATH, number_sum)
        html = ele.get_attribute('innerHTML')
        case_sum = int(html)
        log = 0
        # 2 | read | case number |
        while case_sum > 0:
            if case_sum <= 0:
                break
            else:
                table_content = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div"
                first_row_inner_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                                        "2]/div/div/div/div/table/tbody/tr[1]/td "
                ele = self.wait(first_row_inner_xpath)
                text = ele.get_attribute('innerHTML')
                if text == "No Search Results Match Your Criteria.":
                    break
                    # win32api.MessageBox(0, "No more case in queue. :)", "Cleaning Done", win32con.MB_OK)
                    # sys.exit(0)
                ele = self.driver.find_element(By.XPATH, table_content)
                html = ele.get_attribute('innerHTML')
                soup = BeautifulSoup(html, 'html5lib')
                tables = soup.findAll('table')
                tab = tables[0]
                table_body = tab.tbody
                tr_group = table_body.find_all('tr')
                target = int(len(tr_group) - 1)  # number of tr
                log += target
                print(target)
                for tr in tr_group:
                    if not ("text" in tr['class']):
                        td_group = tr.find_all('td')
                        txt = td_group[5].text
                        case_num = td_group[8].text
                        file1.write(case_num.rstrip() + '\t' + txt + '\n')
                        print(case_num)
            # 2 | count | case number in one page |
            first_row_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                              "2]/div/div/div/div/table/tbody/tr[1]/td[8]/span "
            "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div/table/tbody/tr[1]/td[8]/span"
            last_row_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                             "2]/div/div/div/div/table/tbody/tr[" + str(target) + "]/td[8]/span"
            # print(last_row_xpath)
            input_box = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                        "2]/div/div/div/div/table/tbody/tr[1]/td[8]/span/div/span/div[1]/input"
            select_close = "/html/body/div[7]/div/div/div[15]"
            # 3 | click | first row |
            ele = self.wait(first_row_xpath)
            action_chains = ActionChains(self.driver)
            action_chains.move_to_element(ele).click(ele).perform()
            time.sleep(1)
            self.wait(input_box).send_keys("Closed")
            time.sleep(1)
            self.wait(input_box).click()
            # 4 | shift + last line
            ele = self.wait(last_row_xpath)
            action_chains = ActionChains(self.driver)
            action_chains.key_down(Keys.SHIFT).click(ele).key_up(Keys.SHIFT).perform()
            # 5 | click | id=uir_totalcount |
            js_top = "var q=document.documentElement.scrollTop=0"
            self.driver.execute_script(js_top)
            self.driver.find_element(By.ID, "uir_totalcount").click()
            # 6 |  refresh the list
            self.refresh_list()
            time.sleep(2)
            self.refresh_list()
            time.sleep(2)
            self.refresh_list()
            self.driver.find_element(By.XPATH, tab_case).click()
            ele = self.wait(number_sum)
            html = ele.get_attribute('innerHTML')
            case_sum = int(html)
        file1.close()
        return log
        # 7 |  update the case number

    def open_new_window(self):
        self.driver.get("https://907826.app.netsuite.com/app/center/card.nl?sc=-29&whence=")
        self.cur_handle = self.driver.current_window_handle  # get current handle
        cmd = 'window.open ("https://907826.app.netsuite.com/app/center/card.nl?sc=-29&whence=", "newwindow", ' \
              '"height=1080, width=960, top=0, left=960, toolbar=no, menubar=no, scrollbars=no, resizable=no,' \
              'location=no, status=no")'
        self.driver.execute_script(cmd)
        time.sleep(1)
        all_handle = self.driver.window_handles  # get all handles
        target_url = "https://907826.app.netsuite.com/app/center/card.nl?sc=-29&whence="
        self.driver.switch_to.window(all_handle[-1])  # Switch to the new pop-up window

    def display_script_window(self):
        self.driver.set_window_size(1920,1080)
        self.driver.set_window_position(0,0)

    def hide_script_window(self):
        self.driver.set_window_size(1920,1080)
        self.driver.set_window_position(-1920,0)

    def close_script_window(self):
        self.driver.close()
        self.driver.switch_to.window(self.cur_handle)

    def change_criteria(self, search_type, key_word):
        js_top = "var q=document.documentElement.scrollTop=0"
        self.driver.execute_script(js_top)
        tab_case = "/html/body/div[1]/div[1]/div[2]/ul[4]/li[2]/a/span"
        self.wait(tab_case).click()
        title = "//div[2]/div/div/h2"
        self.wait(title)
        title = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/h2"
        element = self.wait(title)
        while element.get_attribute("innerHTML") is None:
            element = self.driver.find_element(By.XPATH, title)
        # actions = ActionChains(self.driver)
        # actions.move_to_element(element).perform()
        # 2 | mouseMoveAt | Configure Icon | hover element
        ele1 = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/form/div[2]/table[1]")
        # self.hide(ele1)
        ele2 = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/form/div[2]/table[2]")
        self.hide(ele2)
        ele_temp = self.driver.find_element(By.XPATH,
                                            "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div")
        self.show(ele_temp)
        element = self.driver.find_element(By.XPATH,
                                           "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul")
        self.show(element)
        ele = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul/li[3]")
        self.show(ele)
        element = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul/li[3]/a")
        while element.get_attribute("innerHTML") is None:
            element = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul/li[3]/a")
            # print(1)
        while not ("Edit" in element.get_attribute("innerHTML")):
            element = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul/li[3]/a")
            # print(2)
        self.show(element)
        # actions = ActionChains(self.driver)
        # actions.move_to_element(element).perform()
        while "portletpref" not in self.driver.current_url:
            element = self.wait("/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[1]/div/div/ul/li[3]/a")
            self.driver.get(element.get_attribute("href"))
            # print(3)
        # 3 | mouseMoveAt and click | Edit Icon | hover element
        # please ch time.sleep(1)
        self.wait("/html/body/div[1]/div[2]/div[3]/table[1]/tbody/tr[1]/td/table/tbody/tr/td[2]/a").click()
        criteria_subject = "/html/body/div[1]/div[2]/div[3]/table[1]/tbody/tr[3]/td/div[1]/div/div/table/tbody/tr[" \
                           "2]/td/div/div[8]/div/form/div[6]/table/tbody/tr[4]/td[1]"
        self.wait(criteria_subject).click()
        # actions = ActionChains(self.driver)
        # actions.move_to_element(criteria_subject).perform()
        arrow = "/html/body/div[1]/div[2]/div[3]/table[1]/tbody/tr[3]/td/div[1]/div/div/table/tbody/tr[2]/td/div/div[" \
                "8]/div/form/div[6]/table/tbody/tr[4]/td[1]/div/div/span/span[2]/a"
        element = self.wait(arrow)
        self.show(element)
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element.click()

        iframe = "/html/body/div[9]/div[2]/div[1]/div/div/iframe"
        current_handle = self.driver.current_window_handle
        element = self.wait(iframe)
        self.driver.switch_to.frame(element)

        textbox_1 = "/html/body/div[1]/div/div[4]/form/table/tbody/tr[2]/td/table/tbody/tr/td/table/tbody/tr/td/div[" \
                    "1]/span[2]/span "
        textbox_1_1 = "/html/body/div[1]/div/div[4]/form/table/tbody/tr[" \
                      "2]/td/table/tbody/tr/td/table/tbody/tr/td/div[1]/span[2]/span/div[1]/input "
        textbox_2 = "Case_TITLE"
        self.wait(textbox_1).click()
        self.wait(textbox_1_1).send_keys(search_type)
        # 3 | Input | Search Type
        self.driver.find_element(By.NAME, textbox_2).click()
        self.driver.find_element(By.NAME, textbox_2).send_keys(Keys.CONTROL + "a")
        self.driver.find_element(By.NAME, textbox_2).send_keys(key_word)
        # 4 | Input | Search Key Words
        element = "/html/body/div[1]/div/div[4]/form/table/tbody/tr[1]/td/table/tbody/tr/td/table/tbody/tr/td[" \
                  "1]/table/tbody/tr/td[2]/input"
        self.wait(element).click()
        # 5 | Click | Edit
        self.driver.switch_to.parent_frame()
        template = "/html/body/div[1]/div[2]/div[3]/form/table/tbody/tr[1]/td/table/tbody/tr/td/table/tbody/tr/td[" \
                   "1]/table/tbody/tr/td[2]/input "
        self.wait(template).click()
        # 6 | Click | Save

    def take_task(self):
        # Step # | name | target | value
        tab_home = "/html/body/div[1]/div[1]/div[2]/ul[3]/li/a"
        # self.driver.find_element(By.XPATH, tab_home).click()
        target_url = "https://907826.app.netsuite.com/app/center/card.nl?sc=-29&whence=#"
        self.driver.get(target_url)
        self.wait(tab_home).click()
        self.refresh_list_down()
        # 1 | click | case tab |
        number_sum = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[2]/div/div/form/div[" \
                     "2]/table/tbody/tr/td/table/tbody/tr/td/a"
        # first_table = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div/table"
        ele = self.wait(number_sum)
        html = ele.get_attribute('innerHTML')
        case_sum = int(html)
        # 2 | read | case number |
        while case_sum > 0:
            if case_sum <= 0:
                # win32api.MessageBox(0, "No more case in queue. :)", "Cleaning Done", win32con.MB_OK)
                # sys.exit(0)
                break
            else:
                # table_content = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[
                # 2]/div/div/div/div/table"
                table_content = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[2]/div/div/div"
                first_row_inner_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[" \
                                        "2]/div/div/div/div/table/tbody/tr[1]/td"
                ele = self.driver.find_element(By.XPATH, first_row_inner_xpath)
                # self.driver.execute_script("arguments[0].scrollIntoView(true)", ele)
                text = ele.get_attribute('innerHTML')
                if text == "No Search Results Match Your Criteria.":
                    break
                    # win32api.MessageBox(0, "No more case in queue. :)", "Cleaning Done", win32con.MB_OK)
                    # sys.exit(0)
                first_pencil = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[2]/div[" \
                               "2]/div/div/div/div/table/tbody/tr[1]/td[2]/a[1]"
                input_name = "/html/body/div[1]/div[2]/div[3]/form/table/tbody/tr[2]/td/table/tbody/tr[" \
                             "1]/td/table/tbody/tr[2]/td[2]/table/tbody/tr[2]/td/div/span[2]/span/div[1]/input"
                my_name = "/html/body/div[8]/div/div/table/tbody/tr/td"
                save_icon = "/html/body/div[1]/div[2]/div[3]/form/table/tbody/tr[" \
                            "1]/td/table/tbody/tr/td/table/tbody/tr/td[1]/table/tbody/tr/td[2]/input "
                element = self.driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div["
                                                             "2]/div[1]/h2")
                self.driver.execute_script("arguments[0].scrollIntoView(true)", element)
                # print(last_row_xpath)
                # 3 | click | first row |
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, first_pencil))
                    )
                finally:
                    time.sleep(3)
                    element = self.driver.find_element(By.XPATH, first_pencil)
                    element.click()
                self.wait(input_name).send_keys(Keys.CONTROL + "a")
                self.driver.find_element(By.XPATH, input_name).send_keys("Paul Wu")
                time.sleep(3)
                self.driver.find_element(By.XPATH, input_name).send_keys(Keys.ENTER)
                time.sleep(2)
                # 4 | shift + last line
                self.wait(save_icon).click()
                time.sleep(1)
                self.refresh_list_down()
                self.wait(tab_home).click()
                ele = self.wait(number_sum)
                self.driver.execute_script("arguments[0].scrollIntoView(true)", ele)
                html = ele.get_attribute('innerHTML')
                case_sum = int(html)

    def resend_all_case(self):
        # Step # | name | target | value
        filename = datetime.now().strftime("%b_%d_%Y") + "_resend_log.txt"
        file1 = open(filename, "a+")
        tab_case = "/html/body/div[1]/div[1]/div[2]/ul[4]/li[2]/a/span"
        self.wait(tab_case).click()
        self.wait(tab_case).click()
        # 1 | click | case tab |
        number_sum = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/form/div[2]/table[" \
                     "2]/tbody/tr/td/table/tbody/tr/td/a "
        # first_table = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div/table"
        try:
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, number_sum))
            )
        finally:
            time.sleep(1)
            ele = self.driver.find_element(By.XPATH, number_sum)
        html = ele.get_attribute('innerHTML')
        case_sum = int(html)
        # 2 | read | case number |
        while case_sum > 0:
            if case_sum <= 0:
                break
            else:
                table_content = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                                "2]/div/div/div/div"
                first_row_inner_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                                        "2]/div/div/div/div/table/tbody/tr[1]/td "
                ele = self.driver.find_element(By.XPATH, first_row_inner_xpath)
                text = ele.get_attribute('innerHTML')
                if text == "No Search Results Match Your Criteria.":
                    break
                    # win32api.MessageBox(0, "No more case in queue. :)", "Cleaning Done", win32con.MB_OK)
                    # sys.exit(0)
                ele = self.driver.find_element(By.XPATH, table_content)
                html = ele.get_attribute('innerHTML')
                soup = BeautifulSoup(html, 'html5lib')
                tables = soup.findAll('table')
                tab = tables[0]
                table_body = tab.tbody
                number_tr = int(len(table_body.find_all('tr'))) - 1
                print(number_tr)
                # 2 | count | case number in one page |
                first_row_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                                  "2]/div/div/div/div/table/tbody/tr[1]/td[8]/span "
                last_row_xpath = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                                 "2]/div/div/div/div/table/tbody/tr[" + str(number_tr) + "]/td[8]/span"
                # print(last_row_xpath)
                input_box = "/html/body/div[1]/div[2]/div/div/div/div[5]/div[2]/div[1]/div[" \
                            "2]/div/div/div/div/table/tbody/tr[1]/td[8]/span/div/span/div[1]/input "
                select_close = "/html/body/div[7]/div/div/div[15]"
                tr_group = table_body.find_all('tr')
                log_group = []
                self.wait(first_row_xpath).click()
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, input_box))
                    )
                finally:
                    self.driver.find_element(By.XPATH, input_box).send_keys("Closed")
                    time.sleep(1)
                    self.driver.find_element(By.XPATH, input_box).click()
                # 4 | shift + last line
                ele = self.driver.find_element(By.XPATH, last_row_xpath)
                action_chains = ActionChains(self.driver)
                action_chains.key_down(Keys.SHIFT).click(ele).key_up(Keys.SHIFT).perform()
                # 5 | click | id=uir_totalcount |
                js_top = "var q=document.documentElement.scrollTop=0"
                self.driver.execute_script(js_top)
                self.driver.find_element(By.ID, "uir_totalcount").click()
                # 6 |  refresh the list
                for tr in tr_group:
                    if not ("text" in tr['class']):
                        td_group = tr.find_all('td')
                        txt = td_group[5].text
                        case_num = td_group[8].text
                        file1.write(case_num.rstrip() + '\t' + txt + '\n')
                        log_id = txt.split("LogId ", 1)[1]
                        print(log_id)
                        print(case_num)
                        log_group.append(log_id)
                resend_worker = testraw.TestPsd()
                resend_worker.psd_resend(log_group)
                resend_worker.teardown_method()
                self.refresh_list()
                self.driver.find_element(By.XPATH, tab_case).click()
                self.refresh_list()
                ele = self.wait(number_sum)
                html = ele.get_attribute('innerHTML')
                case_sum = int(html)
                time.sleep(2)
        file1.close()

    def cloud_ftp(self, profile_name):
        target_url = "http://psdtool.tc.net/psdTool/"
        self.driver.get(target_url)
        search_input = "/html/body/form/table/tbody/tr[2]/td[2]/div/table/tbody/tr/td[2]/input"

        ele = self.wait(search_input)
        ele.send_keys(profile_name)
        self.wait("/html/body/form/table/tbody/tr[2]/td[2]/div/table/tbody/tr/td[3]/input").click()
        notes_input = "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr[3]/td/table/tbody/tr[2]/td/div[1]/div[" \
                      "2]/div/table/tbody/tr[2]/td[2]/table/tbody/tr/td[2]/textarea "
        try:
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, notes_input))
            )
        finally:
            time.sleep(1)
            qualifier = self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr["
                                                           "3]/td/table/tbody/tr[2]/td/div[1]/div[4]/table/tbody/tr["
                                                           "2]/td[1]").get_attribute("innerHTML")
            ediid = self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr["
                                                       "3]/td/table/tbody/tr[2]/td/div[1]/div[4]/table/tbody/tr[2]/td["
                                                       "2]").get_attribute("innerHTML")
            ele = self.driver.find_element(By.XPATH, notes_input)
            username = qualifier + ediid
            print(username)
            ele.send_keys("\n" + "Cloud SFTP:" + "\n" + "U: " + username + "\n")
            var = profile_name.split()
            profile_id = self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr["
                                                            "3]/td/table/tbody/tr[2]/td/div[1]/div[1]/table/tbody/tr["
                                                            "1]/td[2]").get_attribute("innerHTML")
            password = var[0] + profile_id + "!"
            print(password)
            ele.send_keys("P: " + password)
            self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr["
                                               "3]/td/table/tbody/tr[2]/td/div[1]/div[2]/div/table/tbody/tr["
                                               "3]/td/input").click()

            profile_manage = "/html/body/form/table/tbody/tr[2]/td[1]/table/tbody/tr/td/table/tbody/tr/td[" \
                             "4]/table/tbody/tr/td[1]/a "
            ftp_setup = "/html/body/form/table/tbody/tr[2]/td[1]/table/tbody/tr/td/div[4]/table/tbody/tr[" \
                        "6]/td/table/tbody/tr/td "
            setup_inbox = "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr[2]/td[1]/input[1]"
            element = self.driver.find_element(By.XPATH, profile_manage)
            actions = ActionChains(self.driver)
            actions.move_to_element(element).perform()

            ele = self.wait(ftp_setup)
            actions = ActionChains(self.driver)
            actions.move_to_element(ele)
            actions.click(ele).perform()
            ele = self.wait(setup_inbox)
            ele.send_keys(profile_name)
            self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/table/tbody/tr[2]/td["
                                               "1]/input[2]").click()
            self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/div["
                                               "1]/div/table/tbody/tr[3]/td[2]/input").send_keys(username)
            self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/div["
                                               "1]/div/table/tbody/tr[4]/td[2]/input").send_keys(password)
            self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/div["
                                               "1]/div/table/tbody/tr[5]/td/input[2]").click()
            self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td/div/div["
                                               "1]/div/table/tbody/tr[6]/td/input").click()

    def wait(self, xpath):
        try:
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, xpath))
            )
        finally:
            ele = self.driver.find_element(By.XPATH, xpath)
            return ele

    def show(self, element):
        self.driver.execute_script("arguments[0].style.zIndex=999;", element)
        self.driver.execute_script("arguments[0].style.display='inline';", element)
        # self.driver.execute_script("arguments[0].style.z-index='999';", element)

    def show1(self, element):
        self.driver.execute_script("arguments[0].style.display='block';", element)

    def hide(self, element):
        self.driver.execute_script("arguments[0].style.display='none';", element)